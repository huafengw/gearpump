/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package io.gearpump.examples.iotdemo;

import org.apache.commons.vfs2.FileSystemException;
import org.openimaj.image.DisplayUtilities;
import org.openimaj.image.FImage;
import org.openimaj.image.ImageUtilities;
import org.openimaj.image.MBFImage;
import org.openimaj.image.colour.RGBColour;
import org.openimaj.image.colour.Transforms;
import org.openimaj.image.processing.face.detection.DetectedFace;
import org.openimaj.image.processing.face.detection.FaceDetector;
import org.openimaj.image.processing.face.detection.HaarCascadeDetector;
import org.openimaj.image.processing.face.recognition.FaceRecognitionEngine;
import org.openimaj.ml.annotation.ScoredAnnotation;
import org.openimaj.tools.faces.recognition.options.RecognitionStrategy;
import org.openimaj.util.pair.IndependentPair;
import org.openimaj.video.VideoDisplay;
import org.openimaj.video.VideoDisplayListener;
import org.openimaj.video.capture.VideoCapture;
import org.openimaj.video.capture.VideoCaptureException;

import java.awt.image.BufferedImage;
import java.lang.reflect.Field;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 *
 * @author huafengw
 */
public class CapturingFrame extends javax.swing.JFrame {
  private float threshold = 4f;
  private final int maxTrainingFrames = 5;
  private int remainFramesToTrain;
  private DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
  private VideoCapture videoCapture;
  private VideoDisplay<MBFImage> videoDisplay;
  private String currentUserToFind;
  private RecognitionStrategy strategy = RecognitionStrategy.CLMFeature_KNN;

  private FaceRecognitionEngine<? extends DetectedFace, String> engine;
  private FaceDetector<? extends DetectedFace, FImage> faceDetector;

  /** Creates new form CapturingFrame */
  public CapturingFrame(AnalyzeTask analyzeTask) throws VideoCaptureException, FileSystemException {
    initComponents();
//    this.videoCapture = Util.getVideoCapture();
//    this.videoDisplay = getVideoDisplay(this.videoCapture);

    try
    {
      // We look for a field called "threshold" in the strategy and set
      // the threshold
      // to the value in the options. If the field doesn't exist, we'll
      // ignore it.
      final Field f = this.strategy.getClass().getDeclaredField("threshold");
      f.setAccessible(true);
      f.setFloat(this.strategy, this.threshold);
    } catch (final NoSuchFieldException | SecurityException e)
    {
      System.out.println("WARNING: No threshold field to set in " + this.strategy + ".");
    } catch (final IllegalArgumentException | IllegalAccessException e)
    {
      e.printStackTrace();
    }

    this.engine = strategy.getOptions().createRecognitionEngine();
    this.faceDetector = engine.getDetector();

//    URL url = this.getClass().getClassLoader().getResource("att_faces.zip");
//    VFSGroupDataset<FImage> dataset =
//      new VFSGroupDataset<>("zip:" + url.getPath(), ImageUtilities.FIMAGE_READER);
//    GroupedRandomSplitter<String, FImage> splits = new GroupedRandomSplitter<>(dataset, 5, 0, 5);
//    GroupedDataset<String, ListDataset<FImage>, FImage> training = splits.getTrainingDataset();
//    engine.train(training);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    userName = new javax.swing.JTextField();
    capture_button = new javax.swing.JButton();
    restart_button = new javax.swing.JButton();
    warning_label = new javax.swing.JLabel();
    jPanel1 = new javax.swing.JPanel();
    capturingPanle = new javax.swing.JPanel();
    detectionPanel = new javax.swing.JPanel();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    detectedLocation = new javax.swing.JLabel();
    detectedTime = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosed(java.awt.event.WindowEvent evt) {
        formWindowClosed(evt);
      }
    });
    jLabel1.setText("Captured Video");

    jLabel2.setText("Detection Result");

    jLabel3.setText("Name:");

    userName.setToolTipText("");
    userName.setEnabled(false);

    capture_button.setText("Task a photo");
    capture_button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        capture_buttonActionPerformed(evt);
      }
    });
    capture_button.setEnabled(false);

    restart_button.setText("Start capturing");
    restart_button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        restart_buttonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout capturingPanleLayout = new javax.swing.GroupLayout(capturingPanle);
    capturingPanle.setLayout(capturingPanleLayout);
    capturingPanleLayout.setHorizontalGroup(
      capturingPanleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
    );
    capturingPanleLayout.setVerticalGroup(
      capturingPanleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(capturingPanle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(capturingPanle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout detectionPanelLayout = new javax.swing.GroupLayout(detectionPanel);
    detectionPanel.setLayout(detectionPanelLayout);
    detectionPanelLayout.setHorizontalGroup(
      detectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 320, Short.MAX_VALUE)
    );
    detectionPanelLayout.setVerticalGroup(
      detectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 240, Short.MAX_VALUE)
    );

    jLabel4.setText("Detected Location:");

    jLabel5.setText("Detected Time:");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
          .addContainerGap()
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(warning_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
              .addComponent(restart_button, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
              .addComponent(capture_button, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
              .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGap(18, 18, 18)
              .addComponent(userName))
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(detectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(detectedLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
              .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(detectedTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
          .addGap(4, 4, 4)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
            .addComponent(detectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(detectedLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(capture_button)
            .addComponent(restart_button)
            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(detectedTime, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
          .addComponent(warning_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addContainerGap(20, Short.MAX_VALUE))
    );

    capture_button.getAccessibleContext().setAccessibleDescription("");

    pack();
  }// </editor-fold>

  private void capture_buttonActionPerformed(java.awt.event.ActionEvent evt) {
    FImage image = this.videoDisplay.getVideo().getCurrentFrame().flatten();
    List<? extends DetectedFace> faces = faceDetector.detectFaces(image);
    if (faces.size() == 1) {
      String userName = this.userName.getText();
      if (userName == null || userName.equals("")) {
        this.warning_label.setText("User name is not provided");
      } else {
        this.userName.setEnabled(false);
        this.engine.train(userName, image);
        this.remainFramesToTrain -= 1;
        if (remainFramesToTrain <= 0) {
          this.videoCapture.stopCapture();
          this.videoDisplay.close();
          this.capture_button.setEnabled(false);
          this.currentUserToFind = userName;
          this.warning_label.setText("Looking for " + this.currentUserToFind);
        } else {
          this.warning_label.setText(this.remainFramesToTrain + " photos left");
        }
      }
    } else {
      this.warning_label.setText("Face detection failed, please try again.");
    }
  }

  public void remoteImageArrived(MBFImage image, String host, Long timeStamp) {
    if (currentUserToFind != null && !currentUserToFind.equals("")) {
      List<? extends IndependentPair<? extends DetectedFace, ScoredAnnotation<String>>> results = engine.recogniseBest(image.flatten());
      if(results.size() > 0 && results.get(0).secondObject() != null) {
        String bestPerson = results.get(0).secondObject().annotation;
        if (bestPerson.equals(currentUserToFind)) {
          BufferedImage bufferedImage = ImageUtilities.createBufferedImageForDisplay(image);
          DisplayUtilities.ImageComponent imageComponent;
          if (detectionPanel.getComponentCount() > 0 && detectionPanel.getComponent(0) instanceof DisplayUtilities.ImageComponent) {
            imageComponent = (DisplayUtilities.ImageComponent) detectionPanel.getComponent(0);
            imageComponent.setImage(bufferedImage);
            imageComponent.setOriginalImage(image);
          } else {
            detectionPanel.removeAll();
            imageComponent = new DisplayUtilities.ImageComponent(bufferedImage);
            imageComponent.setOriginalImage(image);
            this.detectionPanel.add(imageComponent);
          }
          imageComponent.setVisible(true);
          this.detectedLocation.setText(host);
          this.detectedTime.setText(dateFormat.format(new Date(timeStamp)));
        }
      }
    }
  }

  private void restart_buttonActionPerformed(java.awt.event.ActionEvent evt) {
    this.userName.setEnabled(true);
    this.capture_button.setEnabled(true);
    this.remainFramesToTrain = this.maxTrainingFrames;
    this.currentUserToFind = null;
    this.userName.setText("");
    this.detectedLocation.setText("");
    this.detectedTime.setText("");
    this.capturingPanle.removeAll();
    this.videoCapture = Util.getVideoCapture();
    this.videoDisplay = getVideoDisplay(this.videoCapture);

    if (detectionPanel.getComponentCount() > 0 && detectionPanel.getComponent(0) instanceof DisplayUtilities.ImageComponent) {
      DisplayUtilities.ImageComponent c = (DisplayUtilities.ImageComponent)detectionPanel.getComponent(0);
      c.setVisible(false);
    }
    this.warning_label.setText("Please take " + this.remainFramesToTrain + " photos.");
  }

  private void formWindowClosed(java.awt.event.WindowEvent evt) {
    this.videoCapture.close();
    this.videoDisplay.close();
  }

  // Variables declaration - do not modify
  private javax.swing.JButton capture_button;
  private javax.swing.JPanel capturingPanle;
  private javax.swing.JLabel detectedLocation;
  private javax.swing.JLabel detectedTime;
  private javax.swing.JPanel detectionPanel;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JButton restart_button;
  private javax.swing.JTextField userName;
  private javax.swing.JLabel warning_label;
  // End of variables declaration

  private VideoDisplay<MBFImage> getVideoDisplay(VideoCapture capture) {
    VideoDisplay<MBFImage> display = VideoDisplay.createVideoDisplay(capture, this.capturingPanle);
    display.addVideoListener(
      new VideoDisplayListener<MBFImage>() {
        FaceDetector<DetectedFace,FImage> _faceDetector = new HaarCascadeDetector();
        public void beforeUpdate(MBFImage frame) {
          List<DetectedFace> faces = _faceDetector.detectFaces(Transforms.calculateIntensity(frame));
          for( DetectedFace face : faces ) {
            frame.drawShape(face.getBounds(), RGBColour.RED);
          }
        }

        public void afterUpdate( VideoDisplay<MBFImage> display ) {
        }
      });
    return display;
  }
}

